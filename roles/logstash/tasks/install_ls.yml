---
# tasks file for logstash
# include os-specified variables
- include_vars: "{{ ansible_os_family }}.yml" 

- name: create directory
  file: path="{{base_home}}" state=directory

- name: check logstash_home
  stat: path="{{logstash_home}}"
  ignore_errors: true
  register: lshome_dir_check

# backup old version logstash installation if exists
- name: backup logstash home
#  command: mv {{logstash_home}} {{logstash_home}}_backuped_by_ansible
  shell: tar czvf logstash_backuped_by_ansible.{{ansible_date_time.epoch}}.tar.gz {{logstash_home}}
  when: lshome_dir_check.stat.exists == true

- name: delete old logstash
  file: path="{{logstash_home}}" state=absent
  sudo: yes
  sudo_user: root

# create a tmp dir for extracting logstash tarball
- name: create directory
  file: path="{{base_home}}/.tmp_logstash" state=directory
  register: tmp_check

# clean tmp dir when it's already exists
- name: clean tmp dir
  shell: rm -rf {{base_home}}/.tmp_logstash/*
  when: tmp_check.changed == False

- name: create directory
  file: path="{{item}}" state=directory
  sudo: yes
  sudo_user: root
  with_items:
    - "/etc/{{logstash_srvname}}/conf.d"
    - "/var/lib/{{logstash_srvname}}"
  tags: preinstall

# extract logstash_tarball to a tmp dir
- name: unpack tarball to remote node
  unarchive: src="{{logstash_tarball}}" dest="{{base_home}}/.tmp_logstash"
  ignore_errors: true
  tags: unpack

#  could not determine the directory name of logstash_tarball extracted
#- name: check if unpack module worked
#  stat: path="{{logstash_home}}"
#  ignore_errors: true
#  register: unpack_check
#  tags: unpack
#
#- fail: msg="unpack logstash failed!"
#  when: unpack_check.stat.exists == false
#  tags: unpack

# move logstash application from tmp dir to install target
- name: install logstash to logstash_home
  shell: mv {{base_home}}/.tmp_logstash/*  {{logstash_home}}

# clean tmp dir
- name: remove temp directory
  file: path="{{base_home}}/.tmp_logstash" state=absent

- name: update ENV
  lineinfile:
    dest: "{{env_profile}}"
    line: "export PATH={{logstash_home}}/bin:$PATH"
    state: present
    create: yes
  tags: preinstall

#- name: create conf directory
#  file: path="/etc/logstash/conf.d/" state=directory
#  ignore_errors: true
#  sudo: yes
#  sudo_user: root
#  tags: preinstall
#
#- name: check conf directory
#  stat: path="/etc/logstash/conf.d/"
#  register: dir_check
#  ignore_errors: true
#  tags: preinstall
#
#- fail: msg="mkdir /etc/logstash/conf.d/ failed!"
#  when: dir_check.stat.exists == false
#  tags: preinstall

- name: create init-script and do the configuration stuff
  template: src={{item.src}} dest={{item.dest}} mode={{item.mode}}
  with_items:
    - {src: "logstash.conf.j2", dest: "/etc/{{logstash_srvname}}/conf.d/logstash_{{logstash_whoami}}.conf", mode: 644}
    - {src: "logstash.j2", dest: "/etc/init.d/{{logstash_srvname}}", mode: 755}
    - {src: "default.j2", dest: "/etc/default/{{logstash_srvname}}", mode: 644}
    - {src: "logstash_rotate.j2", dest: "/etc/logrotate.d/{{logstash_srvname}}", mode: 644}
  sudo: yes
  sudo_user: root
  notify:
    - enable logstash
    - restart logstash
  tags: setupsrv
